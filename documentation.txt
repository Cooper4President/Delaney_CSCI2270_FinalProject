DOCUMENTATION FOR THIS PROGRAM

within main.cpp:

readFile

	Prototype: void readFile(MovieNode*, string)
	Description: reads the provided file line-for-line and makes a MovieNode item out of each line's information
	Expected Inputs: none (takes no parameters)
	Expected Outputs: function is void (no outputs)
	Preconditions: No user-activated functions are necessary before this function can run
	Postconditions: after this function runs, the MovieList array will have a MovieNode at index 0,
		which will allow for root creation for our binary search tree
	
printMenu

	Prototype: void printMenu()
	Description: print all the movies in the binary search tree for this program
	Expected Inputs: none (takes no parameters)
	Expected Outputs: function is void (no outputs)
	Preconditions: No user-activated functions are necessary before this function can run
	Postconditions: There are no expected changes to the state of the program after this function has run 

within movieTree.cpp / movieTree.h:

printMovieInventory

	Prototype: void printMovieInventory(MovieNode* root)
	Description: print all the movies in the binary search tree for this program
	Expected Inputs: root, which is a MovieNode pointer
	Expected Outputs: function is void (no outputs)
	Preconditions: No user-activated functions are necessary before this function can run. The only necessary function is
		the creation of the root for the binary search tree, which happens automatically before any user prompts are called.
	Postconditions: There are no expected changes to the state of the program after this function has run 
	
addMovieNode

	Prototype: void addMovieNode(MovieNode* m)
	Description: adds movies to the binary search tree for this program
	Expected Inputs: m, which is a MovieNode pointer
	Expected Outputs: function is void (no outputs)
	Preconditions: No user-activated functions are necessary before this function can run. The only necessary function is
		the creation of the root for the binary search tree, which happens automatically before any user prompts are called.
	Postconditions: after this function runs, the program's binary search tree will have a new movie node in its proper place
	
searchMovieTree

	Prototype: MovieNode* searchMovieTree(std::string title)
	Description: searches the binary search tree for a match with the title specified
	Expected Inputs: title, which is a string
	Expected Outputs: a MovieNode pointer which pointers to the movie with the specified title
	Preconditions: No user-activated functions are necessary before this function can run. The only necessary function is
		the creation of the root for the binary search tree, which happens automatically before any user prompts are called.
	Postconditions: There are no expected changes to the state of the program after this function has run 
	
printMoviesInGenre

	Prototype: void printMoviesInGenre(MovieNode* current, std::string genre)
	Description: finds all the movies within the specified genre and prints them
	Expected Inputs: current, which is a MovieNode pointer
	Expected Outputs: function is void (no outputs)
	Preconditions: No user-activated functions are necessary before this function can run. The only necessary function is
		the creation of the root for the binary search tree, which happens automatically before any user prompts are called.
	Postconditions: There are no expected changes to the state of the program after this function has run 
	
printMoviesAboveRating

	Prototype: void printMoviesAboveRating(MovieNode* current, double rating)
	Description: finds all the movies at or above the specified rating and prints them
	Expected Inputs: current, which is a MovieNode pointer
	Expected Outputs: function is void (no outputs)
	Preconditions: No user-activated functions are necessary before this function can run. The only necessary function is
		the creation of the root for the binary search tree, which happens automatically before any user prompts are called.
	Postconditions: There are no expected changes to the state of the program after this function has run 
	
printMoviesBelowRating

	Prototype: void printMoviesBelowRating(MovieNode* current, double rating)
	Description: finds all the movies at or below the specified rating and prints them
	Expected Inputs: current, which is a MovieNode pointer
	Expected Outputs: function is void (no outputs)
	Preconditions: No user-activated functions are necessary before this function can run. The only necessary function is
		the creation of the root for the binary search tree, which happens automatically before any user prompts are called.
	Postconditions: There are no expected changes to the state of the program after this function has run 
	
printOlderMovies

	Prototype: void printOlderMovies(MovieNode* current, int year)
	Description: finds all the movies as old or older than the specified year and prints them
	Expected Inputs: current, which is a MovieNode pointer
	Expected Outputs: function is void (no outputs)
	Preconditions: No user-activated functions are necessary before this function can run. The only necessary function is
		the creation of the root for the binary search tree, which happens automatically before any user prompts are called.
	Postconditions: There are no expected changes to the state of the program after this function has run 
	
printNewerMovies

	Prototype: void printNewerMovies(MovieNode* current, int year)
	Description: finds all the movies as new or newer than the specified year and prints them
	Expected Inputs: current, which is a MovieNode pointer
	Expected Outputs: function is void (no outputs)
	Preconditions: No user-activated functions are necessary before this function can run. The only necessary function is
		the creation of the root for the binary search tree, which happens automatically before any user prompts are called.
	Postconditions: There are no expected changes to the state of the program after this function has run 
	
recommendMovies

	Prototype: void recommendMovies(MovieNode* current, std::string genre, double rating)
	Description: takes in a genre and a rating from the user, and finds and prints all movies within that genre and at or above that rating
	Expected Inputs: current, which is a MovieNode pointer
	Expected Outputs: function is void (no outputs)
	Preconditions: No user-activated functions are necessary before this function can run. The only necessary function is
		the creation of the root for the binary search tree, which happens automatically before any user prompts are called.
	Postconditions: There are no expected changes to the state of the program after this function has run 
	
randomMovieInfo

	Prototype: void randomMovieInfo(MovieNode* current)
	Description: generates a random number between 0 and 99 and prints the movie info for the movie at that index within the original movieList array.
		Also prompts the user for if they want to see other movies of the same genre, and if so, prints them
	Expected Inputs: current, which is a MovieNode pointer
	Expected Outputs: function is void (no outputs)
	Preconditions: No user-activated functions are necessary before this function can run. The only necessary function is
		the creation of the root for the binary search tree, which happens automatically before any user prompts are called.
	Postconditions: There are no expected changes to the state of the program after this function has run 
